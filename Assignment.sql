Question 1:
Retrieve the total number of rentals made in the Sakila database.

sql
Copy code
SELECT COUNT(*) AS total_rentals
FROM rental;
Question 2:
Find the average rental duration (in days) of movies rented from the Sakila database.

sql
Copy code
SELECT AVG(rental_duration) AS average_rental_duration
FROM film;
Question 3:
Display the first name and last name of customers in uppercase.

sql
Copy code
SELECT UPPER(first_name) AS first_name, UPPER(last_name) AS last_name
FROM customer;
Question 4:
Extract the month from the rental date and display it alongside the rental ID.

sql
Copy code
SELECT rental_id, MONTH(rental_date) AS rental_month
FROM rental;
Question 5:
Retrieve the count of rentals for each customer (display customer ID and the count of rentals).

sql
Copy code
SELECT customer_id, COUNT(*) AS rental_count
FROM rental
GROUP BY customer_id;
Question 6:
Find the total revenue generated by each store.

sql
Copy code
SELECT store_id, SUM(amount) AS total_revenue
FROM payment
GROUP BY store_id;
Additional Query:
Display the title of the movie, customerâ€™s first name, and last name who rented it.

sql
Copy code
SELECT f.title, c.first_name, c.last_name
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;Question 8: Retrieve the names of all actors who have appeared in the film "Gone with the Wind."

sql
Copy code
SELECT actor.first_name, actor.last_name
FROM film
JOIN film_actor ON film.film_id = film_actor.film_id
JOIN actor ON film_actor.actor_id = actor.actor_id
WHERE film.title = 'Gone with the Wind';
Question 7: Determine the total number of rentals for each category of movies.

sql
Copy code
SELECT category.name AS category_name, COUNT(rental.rental_id) AS total_rentals
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film.film_id = film_category.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name;
Question 9: Find the average rental rate of movies in each language.

sql
Copy code
SELECT language.name AS language_name, AVG(film.rental_rate) AS average_rental_rate
FROM film
JOIN language ON film.language_id = language.language_id
GROUP BY language.name;
Question 9: Retrieve the customer names along with the total amount they've spent on rentals.

sql
Copy code
SELECT customer.first_name, customer.last_name, SUM(payment.amount) AS total_spent
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer.customer_id, customer.first_name, customer.last_name;
Question 4: List the titles of movies rented by each customer in a particular city (e.g., 'London').

sql
Copy code
SELECT customer.first_name, customer.last_name, film.title
FROM customer
JOIN address ON customer.address_id = address.address_id
JOIN city ON address.city_id = city.city_id
JOIN rental ON customer.customer_id = rental.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
WHERE city.city = 'London'
GROUP BY customer.customer_id, film.title;
Question 5: Display the top 5 rented movies along with the number of times they've been rented.

sql
Copy code
SELECT film.title, COUNT(rental.rental_id) AS times_rented
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id
ORDER BY times_rented DESC
LIMIT 5;
Question 10 : Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).

sql
Copy code
SELECT customer.first_name, customer.last_name
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
WHERE inventory.store_id IN (1, 2)
GROUP BY customer.customer_id, customer.first_name, customer.last_name
HAVING COUNT(DISTINCT inventory.store_id) = 2;
Each query uses JOIN operations to connect the necessary tables and implements GROUP BY, COUNT(), AVG(), or SUM() as specified.







